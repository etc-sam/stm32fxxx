/**
 * @brief time.c
 *
 * @param student: Sameer Almaldein
 * @param ID: 679699
 * @param University TU-Chemnitz
 * @param Master : ASE(Automotive Software Engineering )
 */ 
//********************************************************************************************
//
//   header files
//
//********************************************************************************************
#include "basic.h"
//********************************************************************************************
//
//   global variables
//
//********************************************************************************************
//********************************************************************************************
//
//   static  functions' definitions
//
//********************************************************************************************
 uint8_t _timeout(uint8_t *p,uint8_t len)
 {
  uint8_t flg=1;
 for(uint8_t i=0; i<len;i++)
	if(p[i]!=0)
	{
		flg=0;
		break;
	}

   return flg;
 }
//---------------------------------------------------------------------------------------------------------
void _decrment(uint8_t *p, uint8_t len)
{
static uint8_t index=0,i=0;
if(p[index]!=0) p[index]--;
else{
	index++;
	if(index==len)return;

	if(p[index]!=0)
	{
		p[index]--;

		for(i=0;i<index;i++)
			p[i]=59;
		index--;
	}
	else{
	_decrment(p,len);
	index=0;
	}
 }

}
//--------------------------------------------------------------------------------------------------------
//********************************************************************************************
//
//   functions' definitions
//
//********************************************************************************************
uint8_t minute_timeout(minute_t* p)
{
	if(p->val==0)
	 return 1;
	return 0;
}
//----------------------------------------------------------------------------------
uint8_t hour_timeout(hour_t* p)
{
	if(p->val==0)
	return 1;
	return 0;
}
//----------------------------------------------------------------------------------
uint8_t period_timeout(period_t* p)
{
	if(p->val==0)
	return 1;
	return 0;
}
//----------------------------------------------------------------------------------
uint8_t ext_period_timeout(ext_period_t* p)
{
  if(p->hour==0 && p->minute==0 && p->second==0)
	return 1;
  return 0;
}
//----------------------------------------------------------------------------------
uint8_t time_timeout(_time_t* p)
{
   if(p->val==0)
	return 1;
   return 0;
}
//----------------------------------------------------------------------------------
void minute_dec(minute_t* p)
{
 _decrment(p->Array,sizeof(minute_t));
}
//----------------------------------------------------------------------------------
/*void hour_dec(hour_t* p)
{
	_decrment(p->Array,sizeof(hour_t));
}*/
//----------------------------------------------------------------------------------
void period_dec(period_t* p)
{
  	_decrment(p->Array,sizeof(period_t));
}
//----------------------------------------------------------------------------------
void ext_period_dec(ext_period_t* p)
{
	_decrment(p->Array,sizeof(ext_period_t));
}
//----------------------------------------------------------------------------------
void time_dec(_time_t* p)
{
	_decrment(p->Array,sizeof(_time_t));
}
//----------------------------------------------------------------------------------
